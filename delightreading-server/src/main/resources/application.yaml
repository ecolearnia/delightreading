#security.user.name: admin
#security.user.password: secret
#management.security.role: SUPERUSER
server.port: 9090

spring.security.oauth2.client.registration.google.client-id: 279784554172-c9k33663rco8m2o5f1p43ej9ec42fit5.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret: 7UJBkyQL-cjGbq_lrB0nrkmm
spring.security.oauth2.client.registration.google.scope: https://www.googleapis.com/auth/plus.login


# Sample: https://medium.com/@hantsy/secures-your-application-with-spring-security-5-and-keycloak-2804ee912b0f
spring.security.oauth2.client.registration.linkedIn.clientName: LinkedIn
#spring.security.oauth2.client.registration.linkedIn.access-token-uri: https://www.linkedin.com/oauth/v2/accessToken
#spring.security.oauth2.client.registration.linkedIn.user-authorization-uri: https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.registration.linkedIn.client-id: 86q0889a82ojla
spring.security.oauth2.client.registration.linkedIn.client-secret: 2bsyqKpxo4s9FGfz
#spring.security.oauth2.client.registration.linkedIn.scope: r_fullprofile
spring.security.oauth2.client.registration.linkedIn.scope: r_basicprofile
spring.security.oauth2.client.registration.linkedIn.authorization-grant-type: authorization_code
spring.security.oauth2.client.registration.linkedIn.redirectUriTemplate: '{baseUrl}/login/oauth2/code/{registrationId}'
spring.security.oauth2.client.registration.linkedIn.clientAuthenticationMethod: POST

spring.security.oauth2.client.provider.linkedIn.authorization-uri: https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedIn.token-uri: https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedIn.user-info-uri: https://api.linkedin.com/v1/people/~?format=json
# Attribute returned from LinkedIn as the name/id of the user (the subject identifier)
spring.security.oauth2.client.provider.linkedIn.user-name-attribute: id