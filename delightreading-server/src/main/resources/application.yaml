
spring.datasource.url: jdbc:postgresql://localhost:5432/delightreading_devj
spring.datasource.username: delightreading_dev
spring.datasource.password: delightreading_dev
spring.datasource.driverClassName: org.postgresql.Driver
spring.liquibase.change-log: classpath:/db/changelog/db.changelog-master.xml
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults: false



#security.user.name: admin
#security.user.password: secret
#management.security.role: SUPERUSER
server.port: 9090


########## Security ##########
spring.profiles.include: 'secrets'

## Google
spring.security.oauth2.client.registration.google.client-id:
spring.security.oauth2.client.registration.google.client-secret:
spring.security.oauth2.client.registration.google.scope: https://www.googleapis.com/auth/plus.login


## LinkedIn
# Sample: https://medium.com/@hantsy/secures-your-application-with-spring-security-5-and-keycloak-2804ee912b0f
spring.security.oauth2.client.registration.linkedIn.clientName: LinkedIn
spring.security.oauth2.client.registration.linkedIn.client-id:
spring.security.oauth2.client.registration.linkedIn.client-secret:
#spring.security.oauth2.client.registration.linkedIn.scope: r_fullprofile
spring.security.oauth2.client.registration.linkedIn.scope: r_basicprofile
spring.security.oauth2.client.registration.linkedIn.authorization-grant-type: authorization_code
spring.security.oauth2.client.registration.linkedIn.redirectUriTemplate: '{baseUrl}/login/oauth2/code/{registrationId}'
spring.security.oauth2.client.registration.linkedIn.clientAuthenticationMethod: POST

spring.security.oauth2.client.provider.linkedIn.authorization-uri: https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedIn.token-uri: https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedIn.user-info-uri: https://api.linkedin.com/v1/people/~?format=json
# Attribute returned from LinkedIn as the name/id of the user (the subject identifier)
spring.security.oauth2.client.provider.linkedIn.user-name-attribute: id

## GitLab
spring.security.oauth2.client.registration.gitlab.clientName: GitLab
spring.security.oauth2.client.registration.gitlab.client-id:
spring.security.oauth2.client.registration.gitlab.client-secret:
spring.security.oauth2.client.registration.gitlab.scope: api, read_repository
spring.security.oauth2.client.registration.gitlab.authorization-grant-type: authorization_code
spring.security.oauth2.client.registration.gitlab.redirectUriTemplate: '{baseUrl}/login/oauth2/code/{registrationId}'
spring.security.oauth2.client.registration.gitlab.clientAuthenticationMethod: GET

spring.security.oauth2.client.provider.gitlab.authorization-uri: https://gitlab.com/oauth/authorize
spring.security.oauth2.client.provider.gitlab.token-uri: https://gitlab.com/oauth/token
spring.security.oauth2.client.provider.gitlab.user-info-uri: https://gitlab.com/api/v4/user
spring.security.oauth2.client.provider.gitlab.user-name-attribute: id